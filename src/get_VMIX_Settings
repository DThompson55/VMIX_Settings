'use strict';
var fs = require('fs');
const xml2js = require('xml2js');
const parser = new xml2js.Parser();
const axios = require('axios').default;

var host = "http://localhost:8088"; // could parameterize this TTD
//var host = "http://100.76.100.40:8088"; // could parameterize this TTD

async function vMixSend(endpoint,params) {
      const response = axios.get(host+endpoint, {params})
      return response;
} 

function sleep(ms) {
  return new Promise((resolve) => {
    setTimeout(resolve, ms);
  });
}

async function send(params){ //function (response)
        await sleep(1000) // vMix apparently needs some time to process, 
        // but how much time? Do I need to pass a time in?
        // maybe it jsut needs to wait for the response
        return vMixSend("/api", params)
}

function VMIX_XMLtoCSV(error, vMixCfg){
    var keyBag = [];
    var numberBag = [];
    var shortTitleBag = [];
    var shortTitleList = [];
    if (error) {
        console.log('Some error occured - file either not saved or corrupted file saved.');
        console.log("Error = ",error)
        return;
    }
    for (var i = 0; i < vMixCfg.vmix.inputs[0].input.length; i++) {
        let row = vMixCfg.vmix.inputs[0].input[i].$;
        if (keyBag[row.key]){if (verbose) console.log("Duplcate key from vMix at row:",i,"key:",row.key);mismatch=true;}
        if (numberBag[row.number]){if (verbose) console.log("Duplicate INPUT number from vMix at row:",i,"key:",row.key);mismatch=true;}
        if (shortTitleBag[row.shortTitle]){if (verbose) console.log("Duplcate INPUT shortTitle from vMix at row:",i,"key:",row.key);mismatch=true;}
        keyBag[vMixCfg.vmix.inputs[0].input[i].$.key] = row;
        numberBag[vMixCfg.vmix.inputs[0].input[i].$.number] = "OK";
        shortTitleBag[vMixCfg.vmix.inputs[0].input[i].$.shortTitle] = row.number;
        shortTitleList.push([vMixCfg.vmix.inputs[0].input[i].$.shortTitle,row.number])
    }

    var csv = shortTitleList.sort();

    fs.writeFile('vmix_data.csv', "'shortTitle','input number'\n", function (err) {
      if (err) {
        console.log('Some error occured - file either not saved or corrupted file saved.');
        return;
      } else {

        for (let i of csv){
            var value = '"'+i[0]+'", '+i[1]+"\n";
            fs.appendFile('vmix_data.csv', value, function (err) {
              if (err) {
                console.log('Some error occured - file either not saved or corrupted file saved.');
                return;
              } else {
                // done
              }
            })
        }
        console.log("Done!")
      }
    })
}

//
// This gets the live data from VMIX
//
async function processLiveVMIXData(callback){//{httpResponse, status}
    try {
        var response = await send({})
        parser.parseString(response.data, VMIX_XMLtoCSV)
    } catch (err) {
      console.log(err);
      console.log("VMIX Connection Problem: "+err.code+" http://"+err.address+":"+err.port)
    }
}


//
// To Test against a VMIX stub, start the test server in the test folder
//


//
// Live VMIX data
//
processLiveVMIXData();




